<?php
/**
| Created by: Filipe Mota de SÃ¡ - pihh.rocks@gmail.com
| Date: 26/03/2016
| Time: 22:07
*/

class mORM extends mDatabase implements iProcesses{
    /**
    |---------------------------
    | Properties
    |---------------------------
     */

    public $cache = true;
    public $cache_time = 60;
    public $table = false;
    public $primary_key = 'id';
    public $delete_method = false;
    public $default_fetch = PDO::FETCH_CLASS;

    public $params = array();
    public $observers = array();


    // Magic
    public function __construct($params = array(), $table = false){
        if(false === $this->table() && false === $table){
            die('You need to define a table before using mariana\'s ORM.');
        }

        // Set the params
        foreach($params as $key => $param){
            $this->{$key} = $param;
        }

        return $this;
    }

    public function __set($name, $value){
        // TODO: Implement __set() method.
    }

    public function __get($name){
        // TODO: Implement __get() method.
    }

    // Statics
    public static function set_table(){
        parent::set_table(); // TODO: Change the autogenerated stub
    }

    public static function where(){}
    public static function find(){}
    public static function first(){}
    public static function last(){}
    public static function raw(){}
    public static function all(){}

    // Functions
    public function also(){}
    public function delete(){}
    public function select(){}
    public function join(){}
    public function save(){}
    public function get(){}
    public function table($table){}

    // Joins
    public function hasOne(){}
    public function hasMany(){}
    public function manyToMany(){}

    // Observers and triggers
    public function observe(){}
    public function broadcast(){}

    // Array treatment
    public function detatch(){}
    public function as_array(){}
    public function as_object(){}

    // Security settings

    // Cache settings
    public static function check_cache(){}
    public static function get_cache(){}
    public function set_cache(){}
    public function delete_cache(){
        // TODO: cache is delete when time is over or when observe is called - ex: clean cache on update
    }
}

